// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("Todo");

var input = Css.style(/* :: */[
      Css.borderWidth(Css.zero),
      /* :: */[
        Css.backgroundColor(Css.hex("eee")),
        /* :: */[
          Css.borderRadius(Css.px(5)),
          /* :: */[
            Css.padding(Css.px(10)),
            /* :: */[
              Css.width(Css.pct(100)),
              /* :: */[
                Css.boxSizing(Css.borderBox),
                /* :: */[
                  Css.placeholder(/* :: */[
                        Css.opacity(0.3),
                        /* [] */0
                      ]),
                  /* :: */[
                    Css.hover(/* :: */[
                          Css.backgroundColor(Css.hex("ddd")),
                          /* [] */0
                        ]),
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var todo = Css.style(/* :: */[
      Css.padding(Css.px(10)),
      /* :: */[
        Css.fontFamily("sans-serif"),
        /* :: */[
          Css.display(Css.flexBox),
          /* :: */[
            Css.flexDirection(Css.row),
            /* [] */0
          ]
        ]
      ]
    ]);

var checkedTodo = Css.merge(/* :: */[
      todo,
      /* :: */[
        Css.style(/* :: */[
              Css.textDecoration(Css.lineThrough),
              /* [] */0
            ]),
        /* [] */0
      ]
    ]);

var text = Css.style(/* :: */[
      Css.flexGrow(1.0),
      /* [] */0
    ]);

function make(param) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              return React.createElement("div", undefined, React.createElement("input", {
                              className: input,
                              placeholder: "Type your todo",
                              value: state[/* input */1],
                              onKeyUp: (function ($$event) {
                                  if ($$event.key === "Enter") {
                                    return Curry._1(send, /* CreateTodo */0);
                                  } else {
                                    return 0;
                                  }
                                }),
                              onChange: (function ($$event) {
                                  return Curry._1(send, /* SetInput */Block.__(0, [$$event.target.value]));
                                })
                            }), Belt_Array.keepMap(state[/* todos */0], (function (item) {
                                var match = state[/* filter */2];
                                var exit = 0;
                                switch (match) {
                                  case 0 : 
                                      exit = 1;
                                      break;
                                  case 1 : 
                                      if (item[/* checked */2]) {
                                        exit = 1;
                                      } else {
                                        return undefined;
                                      }
                                      break;
                                  case 2 : 
                                      if (item[/* checked */2]) {
                                        return undefined;
                                      } else {
                                        exit = 1;
                                      }
                                      break;
                                  
                                }
                                if (exit === 1) {
                                  var match$1 = item[/* checked */2];
                                  return Caml_option.some(React.createElement("div", {
                                                  key: item[/* id */0],
                                                  className: match$1 ? checkedTodo : todo
                                                }, React.createElement("input", {
                                                      checked: item[/* checked */2],
                                                      type: "checkbox",
                                                      onChange: (function (param) {
                                                          return Curry._1(send, /* SetTodoStatus */Block.__(1, [
                                                                        item[/* id */0],
                                                                        !item[/* checked */2]
                                                                      ]));
                                                        })
                                                    }), React.createElement("div", {
                                                      className: text
                                                    }, item[/* text */1]), React.createElement("div", {
                                                      role: "button",
                                                      tabIndex: 0,
                                                      onClick: (function (param) {
                                                          return Curry._1(send, /* DeleteTodo */Block.__(2, [item[/* id */0]]));
                                                        })
                                                    }, "‚ùå")));
                                }
                                
                              })), React.createElement("button", {
                              onClick: (function (param) {
                                  return Curry._1(send, /* SetFilter */Block.__(3, [/* All */0]));
                                })
                            }, "All"), React.createElement("button", {
                              onClick: (function (param) {
                                  return Curry._1(send, /* SetFilter */Block.__(3, [/* Checked */1]));
                                })
                            }, "Done"), React.createElement("button", {
                              onClick: (function (param) {
                                  return Curry._1(send, /* SetFilter */Block.__(3, [/* Todo */2]));
                                })
                            }, "Todo"));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* todos : array */[],
                      /* input */"",
                      /* filter : All */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (state[/* input */1].trim() === "") {
                  return /* NoUpdate */0;
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* todos */Belt_Array.concat(state[/* todos */0], /* array */[/* record */[
                                      /* id */String(Math.random()),
                                      /* text */state[/* input */1].trim(),
                                      /* checked */false
                                    ]]),
                              /* input */"",
                              /* filter */state[/* filter */2]
                            ]]);
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* todos */state[/* todos */0],
                                  /* input */action[0],
                                  /* filter */state[/* filter */2]
                                ]]);
                  case 1 : 
                      var checked = action[1];
                      var id = action[0];
                      return /* Update */Block.__(0, [/* record */[
                                  /* todos */Belt_Array.map(state[/* todos */0], (function (item) {
                                          var match = item[/* id */0] === id;
                                          if (match) {
                                            return /* record */[
                                                    /* id */item[/* id */0],
                                                    /* text */item[/* text */1],
                                                    /* checked */checked
                                                  ];
                                          } else {
                                            return item;
                                          }
                                        })),
                                  /* input */state[/* input */1],
                                  /* filter */state[/* filter */2]
                                ]]);
                  case 2 : 
                      var id$1 = action[0];
                      return /* Update */Block.__(0, [/* record */[
                                  /* todos */Belt_Array.keep(state[/* todos */0], (function (item) {
                                          return item[/* id */0] !== id$1;
                                        })),
                                  /* input */state[/* input */1],
                                  /* filter */state[/* filter */2]
                                ]]);
                  case 3 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* todos */state[/* todos */0],
                                  /* input */state[/* input */1],
                                  /* filter */action[0]
                                ]]);
                  
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.make = make;
/* component Not a pure module */
